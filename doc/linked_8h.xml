<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="linked_8h" kind="file" language="C++">
    <compoundname>linked.h</compoundname>
    <includes refid="state_8h" local="yes">../data/state.h</includes>
    <includedby refid="board_8h" local="yes">projeto/interface/board.h</includedby>
    <includedby refid="linked_8c" local="yes">projeto/linked_lists/linked.c</includedby>
    <includedby refid="game_8c" local="yes">projeto/logic/game.c</includedby>
    <incdepgraph>
      <node id="60">
        <label>projeto/linked_lists/linked.h</label>
        <link refid="linked_8h"/>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>../data/state.h</label>
        <link refid="state_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="62">
        <label>projeto/linked_lists/linked.h</label>
        <link refid="linked_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>projeto/interface/board.h</label>
        <link refid="board_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structList" prot="public">List</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="linked_8h_1ab2926f8a4255847074664d6549d3a1ee" prot="public" static="no">
        <type>struct <ref refid="structList" kindref="compound">List</ref></type>
        <definition>typedef struct List  List</definition>
        <argsstring></argsstring>
        <name>List</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/linked_lists/linked.h" line="24" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="linked_8h_1a4859d0b217430d5fe5fee2a31477704a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structList" kindref="compound">List</ref> *</type>
        <definition>List* create_list</definition>
        <argsstring>()</argsstring>
        <name>create_list</name>
        <briefdescription>
<para>Cria uma lista ligada. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/linked_lists/linked.h" line="29" column="1" bodyfile="projeto/linked_lists/linked.c" bodystart="7" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="linked_8h_1a289cc1406d79ac5ccae8e0e478c7608c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* get_head</definition>
        <argsstring>(List *L)</argsstring>
        <name>get_head</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Obtém a cabeça de uma lista ligada. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para uma lista ligada </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A cabeça da lista ligada </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/linked_lists/linked.h" line="36" column="1" bodyfile="projeto/linked_lists/linked.c" bodystart="31" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="linked_8h_1a2a160cb964358a6e2631964d5d699ae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structList" kindref="compound">List</ref> *</type>
        <definition>List* head_insert</definition>
        <argsstring>(List *L, void *value)</argsstring>
        <name>head_insert</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Insere um elemento à cabeça de uma lista ligada. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para uma lista ligada </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o elemento a adicionar </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A lista ligada depois de adicionar o elemento à cabeça </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/linked_lists/linked.h" line="44" column="1" bodyfile="projeto/linked_lists/linked.c" bodystart="18" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="linked_8h_1aedb37e674c83adca8234ab8a6d5bb667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structList" kindref="compound">List</ref> *</type>
        <definition>List* remove_head</definition>
        <argsstring>(List *L)</argsstring>
        <name>remove_head</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Remove o elemento na cabeça de uma lista ligada. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para uma lista ligada </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A lista ligada depois de remover a cabeça </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/linked_lists/linked.h" line="51" column="1" bodyfile="projeto/linked_lists/linked.c" bodystart="40" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="linked_8h_1a6df33bdc0f163281cf3b226f7748cad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structList" kindref="compound">List</ref> *</type>
        <definition>List* clear_list</definition>
        <argsstring>(List *L)</argsstring>
        <name>clear_list</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Remove o elemento na cabeça de uma lista ligada. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para uma lista ligada </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A lista ligada depois de limpar a informação </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/linked_lists/linked.h" line="58" column="1" bodyfile="projeto/linked_lists/linked.c" bodystart="56" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="linked_8h_1a84c81d92afe4ad7e74bd5d4dc9277029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int empty_list</definition>
        <argsstring>(const List *L)</argsstring>
        <name>empty_list</name>
        <param>
          <type>const <ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Confirma se a lista é vazia ou não. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para uma lista ligada </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Se é verdadeiro ou falso </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/linked_lists/linked.h" line="65" column="1" bodyfile="projeto/linked_lists/linked.c" bodystart="67" bodyend="71"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Definição das funções que criam e alteram listas ligadas </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#ifndef<sp/>RASTROS_LI2_LINKED_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RASTROS_LI2_LINKED_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../data/state.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="structList" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structList" kindref="compound">List</ref>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="structList_1a6ec71a60bfa3755601f58acb43568e3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structList_1a6ec71a60bfa3755601f58acb43568e3a" kindref="member">pos</ref>;</highlight></codeline>
<codeline lineno="22" refid="structList_1af83740bdee3301b9627bcc401f1bda1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structList" kindref="compound">List</ref>*<sp/><ref refid="structList_1af83740bdee3301b9627bcc401f1bda1a" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">}<sp/><ref refid="structList" kindref="compound">List</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="structList" kindref="compound">List</ref>*<sp/><ref refid="linked_8h_1a4859d0b217430d5fe5fee2a31477704a" kindref="member">create_list</ref>();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="linked_8h_1a289cc1406d79ac5ccae8e0e478c7608c" kindref="member">get_head</ref>(<ref refid="structList" kindref="compound">List</ref>*<sp/>L);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="structList" kindref="compound">List</ref>*<sp/><ref refid="linked_8h_1a2a160cb964358a6e2631964d5d699ae5" kindref="member">head_insert</ref>(<ref refid="structList" kindref="compound">List</ref>*<sp/>L,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>value);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="structList" kindref="compound">List</ref>*<sp/><ref refid="linked_8h_1aedb37e674c83adca8234ab8a6d5bb667" kindref="member">remove_head</ref>(<ref refid="structList" kindref="compound">List</ref>*<sp/>L);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="structList" kindref="compound">List</ref>*<sp/><ref refid="linked_8h_1a6df33bdc0f163281cf3b226f7748cad9" kindref="member">clear_list</ref><sp/>(<ref refid="structList" kindref="compound">List</ref>*<sp/>L);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="linked_8h_1a84c81d92afe4ad7e74bd5d4dc9277029" kindref="member">empty_list</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structList" kindref="compound">List</ref>*<sp/>L);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//RASTROS_LI2_LINKED_H</highlight></codeline>
    </programlisting>
    <location file="projeto/linked_lists/linked.h"/>
  </compounddef>
</doxygen>
